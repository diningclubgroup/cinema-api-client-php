<?php
/**
 * ChainApi
 * PHP version 5
 *
 * @category Class
 * @package  DCG\Cinema
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cinema API
 *
 * Dining club API for Cinema platform
 *
 * OpenAPI spec version: 0.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DCG\Cinema\Api;

use \DCG\Cinema\ApiClient;
use \DCG\Cinema\ApiException;
use \DCG\Cinema\Configuration;
use \DCG\Cinema\ObjectSerializer;

/**
 * ChainApi Class Doc Comment
 *
 * @category Class
 * @package  DCG\Cinema
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ChainApi
{
    /**
     * API Client
     *
     * @var \DCG\Cinema\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \DCG\Cinema\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\DCG\Cinema\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \DCG\Cinema\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \DCG\Cinema\ApiClient $apiClient set the API client
     *
     * @return ChainApi
     */
    public function setApiClient(\DCG\Cinema\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation chainsChainIdCinemasGet
     *
     * Retrieve a list of all cinemas associated with a single cinema chain
     *
     * @param string $chain_id The ID of the cinema chain (required)
     * @throws \DCG\Cinema\ApiException on non-2xx response
     * @return void
     */
    public function chainsChainIdCinemasGet($chain_id)
    {
        list($response) = $this->chainsChainIdCinemasGetWithHttpInfo($chain_id);
        return $response;
    }

    /**
     * Operation chainsChainIdCinemasGetWithHttpInfo
     *
     * Retrieve a list of all cinemas associated with a single cinema chain
     *
     * @param string $chain_id The ID of the cinema chain (required)
     * @throws \DCG\Cinema\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function chainsChainIdCinemasGetWithHttpInfo($chain_id)
    {
        // verify the required parameter 'chain_id' is set
        if ($chain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $chain_id when calling chainsChainIdCinemasGet');
        }
        // parse inputs
        $resourcePath = "/chains/{chainId}/cinemas";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($chain_id !== null) {
            $resourcePath = str_replace(
                "{" . "chainId" . "}",
                $this->apiClient->getSerializer()->toPathValue($chain_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Client-Token');
        if (strlen($apiKey) !== 0) {
            $headerParams['Client-Token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('User-Token');
        if (strlen($apiKey) !== 0) {
            $headerParams['User-Token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/chains/{chainId}/cinemas'
            );

            return [$response, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation chainsChainIdTicketTypesGet
     *
     * Retrieve a list of all ticket types associated with a single cinema chain
     *
     * @param string $chain_id The ID of the cinema chain (required)
     * @throws \DCG\Cinema\ApiException on non-2xx response
     * @return void
     */
    public function chainsChainIdTicketTypesGet($chain_id)
    {
        list($response) = $this->chainsChainIdTicketTypesGetWithHttpInfo($chain_id);
        return $response;
    }

    /**
     * Operation chainsChainIdTicketTypesGetWithHttpInfo
     *
     * Retrieve a list of all ticket types associated with a single cinema chain
     *
     * @param string $chain_id The ID of the cinema chain (required)
     * @throws \DCG\Cinema\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function chainsChainIdTicketTypesGetWithHttpInfo($chain_id)
    {
        // verify the required parameter 'chain_id' is set
        if ($chain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $chain_id when calling chainsChainIdTicketTypesGet');
        }
        // parse inputs
        $resourcePath = "/chains/{chainId}/ticket-types";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($chain_id !== null) {
            $resourcePath = str_replace(
                "{" . "chainId" . "}",
                $this->apiClient->getSerializer()->toPathValue($chain_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Client-Token');
        if (strlen($apiKey) !== 0) {
            $headerParams['Client-Token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('User-Token');
        if (strlen($apiKey) !== 0) {
            $headerParams['User-Token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/chains/{chainId}/ticket-types'
            );

            return [$response, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation chainsGet
     *
     * Retrieve a list of all cinema chains
     *
     * @throws \DCG\Cinema\ApiException on non-2xx response
     * @return void
     */
    public function chainsGet()
    {
        list($response) = $this->chainsGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation chainsGetWithHttpInfo
     *
     * Retrieve a list of all cinema chains
     *
     * @throws \DCG\Cinema\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function chainsGetWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/chains";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Client-Token');
        if (strlen($apiKey) !== 0) {
            $headerParams['Client-Token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('User-Token');
        if (strlen($apiKey) !== 0) {
            $headerParams['User-Token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/chains'
            );

            return [$response, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
}
