<?php
/**
 * UserApi
 * PHP version 5
 *
 * @category Class
 * @package  DCG\Cinema
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cinema API
 *
 * Dining club API for Cinema platform
 *
 * OpenAPI spec version: 0.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DCG\Cinema\Api;

use \DCG\Cinema\ApiClient;
use \DCG\Cinema\ApiException;
use \DCG\Cinema\Configuration;
use \DCG\Cinema\ObjectSerializer;

/**
 * UserApi Class Doc Comment
 *
 * @category Class
 * @package  DCG\Cinema
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UserApi
{
    /**
     * API Client
     *
     * @var \DCG\Cinema\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \DCG\Cinema\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\DCG\Cinema\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \DCG\Cinema\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \DCG\Cinema\ApiClient $apiClient set the API client
     *
     * @return UserApi
     */
    public function setApiClient(\DCG\Cinema\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation usersGet
     *
     * Retrieve a list of users
     *
     * @param string $email The user&#39;s email address (note that this is currently required but only as a small security step - otherwise any user would be able to fetch a list of all users registered with the same client as them) (required)
     * @throws \DCG\Cinema\ApiException on non-2xx response
     * @return void
     */
    public function usersGet($email)
    {
        list($response) = $this->usersGetWithHttpInfo($email);
        return $response;
    }

    /**
     * Operation usersGetWithHttpInfo
     *
     * Retrieve a list of users
     *
     * @param string $email The user&#39;s email address (note that this is currently required but only as a small security step - otherwise any user would be able to fetch a list of all users registered with the same client as them) (required)
     * @throws \DCG\Cinema\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersGetWithHttpInfo($email)
    {
        // verify the required parameter 'email' is set
        if ($email === null) {
            throw new \InvalidArgumentException('Missing the required parameter $email when calling usersGet');
        }
        // parse inputs
        $resourcePath = "/users";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($email !== null) {
            $queryParams['email'] = $this->apiClient->getSerializer()->toQueryValue($email);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Client-Token');
        if (strlen($apiKey) !== 0) {
            $headerParams['Client-Token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/users'
            );

            return [$response, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation usersMeGet
     *
     * Retrieve the user identified by the attached access token
     *
     * @throws \DCG\Cinema\ApiException on non-2xx response
     * @return void
     */
    public function usersMeGet()
    {
        list($response) = $this->usersMeGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation usersMeGetWithHttpInfo
     *
     * Retrieve the user identified by the attached access token
     *
     * @throws \DCG\Cinema\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersMeGetWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/users/me";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Client-Token');
        if (strlen($apiKey) !== 0) {
            $headerParams['Client-Token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('User-Token');
        if (strlen($apiKey) !== 0) {
            $headerParams['User-Token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/users/me'
            );

            return [$response, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation usersPost
     *
     * Create a new user
     *
     * @param \DCG\Cinema\Model\UserData $user_data Data representing a user (required)
     * @throws \DCG\Cinema\ApiException on non-2xx response
     * @return void
     */
    public function usersPost($user_data)
    {
        list($response) = $this->usersPostWithHttpInfo($user_data);
        return $response;
    }

    /**
     * Operation usersPostWithHttpInfo
     *
     * Create a new user
     *
     * @param \DCG\Cinema\Model\UserData $user_data Data representing a user (required)
     * @throws \DCG\Cinema\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersPostWithHttpInfo($user_data)
    {
        // verify the required parameter 'user_data' is set
        if ($user_data === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_data when calling usersPost');
        }
        // parse inputs
        $resourcePath = "/users";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // body params
        $_tempBody = null;
        if (isset($user_data)) {
            $_tempBody = $user_data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Client-Token');
        if (strlen($apiKey) !== 0) {
            $headerParams['Client-Token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/users'
            );

            return [$response, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation usersUserIdGet
     *
     * Retrieve a single user from their ID
     *
     * @param string $user_id The user&#39;s ID (required)
     * @throws \DCG\Cinema\ApiException on non-2xx response
     * @return void
     */
    public function usersUserIdGet($user_id)
    {
        list($response) = $this->usersUserIdGetWithHttpInfo($user_id);
        return $response;
    }

    /**
     * Operation usersUserIdGetWithHttpInfo
     *
     * Retrieve a single user from their ID
     *
     * @param string $user_id The user&#39;s ID (required)
     * @throws \DCG\Cinema\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersUserIdGetWithHttpInfo($user_id)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling usersUserIdGet');
        }
        // parse inputs
        $resourcePath = "/users/{userId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "userId" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Client-Token');
        if (strlen($apiKey) !== 0) {
            $headerParams['Client-Token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('User-Token');
        if (strlen($apiKey) !== 0) {
            $headerParams['User-Token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/users/{userId}'
            );

            return [$response, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation usersUserIdTokensPost
     *
     * Create a new access token for a user
     *
     * @param string $user_id The user&#39;s ID (required)
     * @throws \DCG\Cinema\ApiException on non-2xx response
     * @return void
     */
    public function usersUserIdTokensPost($user_id)
    {
        list($response) = $this->usersUserIdTokensPostWithHttpInfo($user_id);
        return $response;
    }

    /**
     * Operation usersUserIdTokensPostWithHttpInfo
     *
     * Create a new access token for a user
     *
     * @param string $user_id The user&#39;s ID (required)
     * @throws \DCG\Cinema\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersUserIdTokensPostWithHttpInfo($user_id)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling usersUserIdTokensPost');
        }
        // parse inputs
        $resourcePath = "/users/{userId}/tokens";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "userId" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Client-Token');
        if (strlen($apiKey) !== 0) {
            $headerParams['Client-Token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('User-Token');
        if (strlen($apiKey) !== 0) {
            $headerParams['User-Token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/users/{userId}/tokens'
            );

            return [$response, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation usersUserIdTokensTokenGet
     *
     * Retrieve a token and its associated metadata (Not MVP)
     *
     * @param string $user_id The user&#39;s ID (required)
     * @param string $token The user access token (required)
     * @throws \DCG\Cinema\ApiException on non-2xx response
     * @return void
     */
    public function usersUserIdTokensTokenGet($user_id, $token)
    {
        list($response) = $this->usersUserIdTokensTokenGetWithHttpInfo($user_id, $token);
        return $response;
    }

    /**
     * Operation usersUserIdTokensTokenGetWithHttpInfo
     *
     * Retrieve a token and its associated metadata (Not MVP)
     *
     * @param string $user_id The user&#39;s ID (required)
     * @param string $token The user access token (required)
     * @throws \DCG\Cinema\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersUserIdTokensTokenGetWithHttpInfo($user_id, $token)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling usersUserIdTokensTokenGet');
        }
        // verify the required parameter 'token' is set
        if ($token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $token when calling usersUserIdTokensTokenGet');
        }
        // parse inputs
        $resourcePath = "/users/{userId}/tokens/{token}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "userId" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($token !== null) {
            $resourcePath = str_replace(
                "{" . "token" . "}",
                $this->apiClient->getSerializer()->toPathValue($token),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Client-Token');
        if (strlen($apiKey) !== 0) {
            $headerParams['Client-Token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('User-Token');
        if (strlen($apiKey) !== 0) {
            $headerParams['User-Token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/users/{userId}/tokens/{token}'
            );

            return [$response, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
}
