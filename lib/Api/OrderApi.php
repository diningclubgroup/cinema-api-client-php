<?php
/**
 * OrderApi
 * PHP version 5
 *
 * @category Class
 * @package  DCG\Cinema
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cinema API
 *
 * Dining club API for Cinema platform
 *
 * OpenAPI spec version: 0.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DCG\Cinema\Api;

use \DCG\Cinema\ApiClient;
use \DCG\Cinema\ApiException;
use \DCG\Cinema\Configuration;
use \DCG\Cinema\ObjectSerializer;

/**
 * OrderApi Class Doc Comment
 *
 * @category Class
 * @package  DCG\Cinema
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrderApi
{
    /**
     * API Client
     *
     * @var \DCG\Cinema\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \DCG\Cinema\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\DCG\Cinema\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \DCG\Cinema\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \DCG\Cinema\ApiClient $apiClient set the API client
     *
     * @return OrderApi
     */
    public function setApiClient(\DCG\Cinema\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation ordersGet
     *
     * Retrieve a list of orders the user has access to. If the user is an administrator, they may filter by user ID.
     *
     * @param string $user_id The user&#39;s ID (optional)
     * @throws \DCG\Cinema\ApiException on non-2xx response
     * @return void
     */
    public function ordersGet($user_id = null)
    {
        list($response) = $this->ordersGetWithHttpInfo($user_id);
        return $response;
    }

    /**
     * Operation ordersGetWithHttpInfo
     *
     * Retrieve a list of orders the user has access to. If the user is an administrator, they may filter by user ID.
     *
     * @param string $user_id The user&#39;s ID (optional)
     * @throws \DCG\Cinema\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function ordersGetWithHttpInfo($user_id = null)
    {
        // parse inputs
        $resourcePath = "/orders";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($user_id !== null) {
            $queryParams['userId'] = $this->apiClient->getSerializer()->toQueryValue($user_id);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Client-Token');
        if (strlen($apiKey) !== 0) {
            $headerParams['Client-Token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('User-Token');
        if (strlen($apiKey) !== 0) {
            $headerParams['User-Token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/orders'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation ordersOrderIdGet
     *
     * Retrieve a single order from its ID
     *
     * @param string $order_id The ID of the user&#39;s order (required)
     * @throws \DCG\Cinema\ApiException on non-2xx response
     * @return void
     */
    public function ordersOrderIdGet($order_id)
    {
        list($response) = $this->ordersOrderIdGetWithHttpInfo($order_id);
        return $response;
    }

    /**
     * Operation ordersOrderIdGetWithHttpInfo
     *
     * Retrieve a single order from its ID
     *
     * @param string $order_id The ID of the user&#39;s order (required)
     * @throws \DCG\Cinema\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function ordersOrderIdGetWithHttpInfo($order_id)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $order_id when calling ordersOrderIdGet');
        }
        // parse inputs
        $resourcePath = "/orders/{orderId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                "{" . "orderId" . "}",
                $this->apiClient->getSerializer()->toPathValue($order_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Client-Token');
        if (strlen($apiKey) !== 0) {
            $headerParams['Client-Token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('User-Token');
        if (strlen($apiKey) !== 0) {
            $headerParams['User-Token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/orders/{orderId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation ordersOrderIdNotifyPost
     *
     * Request that the service sends an order confirmation email to the provided email address
     *
     * @param string $order_id The ID of the user&#39;s order (required)
     * @param \DCG\Cinema\Model\EmailAddress $email_address An object containing a single &#39;email_address&#39; entry (required)
     * @throws \DCG\Cinema\ApiException on non-2xx response
     * @return void
     */
    public function ordersOrderIdNotifyPost($order_id, $email_address)
    {
        list($response) = $this->ordersOrderIdNotifyPostWithHttpInfo($order_id, $email_address);
        return $response;
    }

    /**
     * Operation ordersOrderIdNotifyPostWithHttpInfo
     *
     * Request that the service sends an order confirmation email to the provided email address
     *
     * @param string $order_id The ID of the user&#39;s order (required)
     * @param \DCG\Cinema\Model\EmailAddress $email_address An object containing a single &#39;email_address&#39; entry (required)
     * @throws \DCG\Cinema\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function ordersOrderIdNotifyPostWithHttpInfo($order_id, $email_address)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $order_id when calling ordersOrderIdNotifyPost');
        }
        // verify the required parameter 'email_address' is set
        if ($email_address === null) {
            throw new \InvalidArgumentException('Missing the required parameter $email_address when calling ordersOrderIdNotifyPost');
        }
        // parse inputs
        $resourcePath = "/orders/{orderId}/notify";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                "{" . "orderId" . "}",
                $this->apiClient->getSerializer()->toPathValue($order_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($email_address)) {
            $_tempBody = $email_address;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Client-Token');
        if (strlen($apiKey) !== 0) {
            $headerParams['Client-Token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('User-Token');
        if (strlen($apiKey) !== 0) {
            $headerParams['User-Token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/orders/{orderId}/notify'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation ordersPost
     *
     * Create a new order and begin a new transaction
     *
     * @param \DCG\Cinema\Model\OrderData $order_data Data representing an order (required)
     * @throws \DCG\Cinema\ApiException on non-2xx response
     * @return void
     */
    public function ordersPost($order_data)
    {
        list($response) = $this->ordersPostWithHttpInfo($order_data);
        return $response;
    }

    /**
     * Operation ordersPostWithHttpInfo
     *
     * Create a new order and begin a new transaction
     *
     * @param \DCG\Cinema\Model\OrderData $order_data Data representing an order (required)
     * @throws \DCG\Cinema\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function ordersPostWithHttpInfo($order_data)
    {
        // verify the required parameter 'order_data' is set
        if ($order_data === null) {
            throw new \InvalidArgumentException('Missing the required parameter $order_data when calling ordersPost');
        }
        // parse inputs
        $resourcePath = "/orders";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // body params
        $_tempBody = null;
        if (isset($order_data)) {
            $_tempBody = $order_data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Client-Token');
        if (strlen($apiKey) !== 0) {
            $headerParams['Client-Token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('User-Token');
        if (strlen($apiKey) !== 0) {
            $headerParams['User-Token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/orders'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation paymentProvidersGet
     *
     * Retrieve a list of payment providers that the user may utilise to complete an order
     *
     * @throws \DCG\Cinema\ApiException on non-2xx response
     * @return void
     */
    public function paymentProvidersGet()
    {
        list($response) = $this->paymentProvidersGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation paymentProvidersGetWithHttpInfo
     *
     * Retrieve a list of payment providers that the user may utilise to complete an order
     *
     * @throws \DCG\Cinema\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function paymentProvidersGetWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/payment-providers";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Client-Token');
        if (strlen($apiKey) !== 0) {
            $headerParams['Client-Token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('User-Token');
        if (strlen($apiKey) !== 0) {
            $headerParams['User-Token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/payment-providers'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation transactionsTransactionIdPatch
     *
     * Complete a pending transaction
     *
     * @param string $transaction_id The ID of the transaction (required)
     * @param \DCG\Cinema\Model\TransactionPatchData $transaction_patch_data Additional data needed to complete a transaction. payer_id is required for PayPal transactions only. (optional)
     * @throws \DCG\Cinema\ApiException on non-2xx response
     * @return void
     */
    public function transactionsTransactionIdPatch($transaction_id, $transaction_patch_data = null)
    {
        list($response) = $this->transactionsTransactionIdPatchWithHttpInfo($transaction_id, $transaction_patch_data);
        return $response;
    }

    /**
     * Operation transactionsTransactionIdPatchWithHttpInfo
     *
     * Complete a pending transaction
     *
     * @param string $transaction_id The ID of the transaction (required)
     * @param \DCG\Cinema\Model\TransactionPatchData $transaction_patch_data Additional data needed to complete a transaction. payer_id is required for PayPal transactions only. (optional)
     * @throws \DCG\Cinema\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function transactionsTransactionIdPatchWithHttpInfo($transaction_id, $transaction_patch_data = null)
    {
        // verify the required parameter 'transaction_id' is set
        if ($transaction_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $transaction_id when calling transactionsTransactionIdPatch');
        }
        // parse inputs
        $resourcePath = "/transactions/{transactionId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($transaction_id !== null) {
            $resourcePath = str_replace(
                "{" . "transactionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($transaction_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($transaction_patch_data)) {
            $_tempBody = $transaction_patch_data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Client-Token');
        if (strlen($apiKey) !== 0) {
            $headerParams['Client-Token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('User-Token');
        if (strlen($apiKey) !== 0) {
            $headerParams['User-Token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/transactions/{transactionId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
}
