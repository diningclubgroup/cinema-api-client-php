<?php
/**
 * TicketTypesDataEntity
 *
 * PHP version 5
 *
 * @category Class
 * @package  DCG\Cinema
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cinema API
 *
 * Dining club API for Cinema platform
 *
 * OpenAPI spec version: 0.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DCG\Cinema\Model;

use \ArrayAccess;

/**
 * TicketTypesDataEntity Class Doc Comment
 *
 * @category    Class
 * @package     DCG\Cinema
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class TicketTypesDataEntity implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ticketTypesDataEntity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'vendor_id' => 'string',
        'chain_id' => 'string',
        'location_id' => 'string',
        'price' => 'float',
        'currency' => 'string',
        'conditions_of_use' => 'string',
        'properties' => 'string[]',
        'has_low_quantity' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'vendor_id' => null,
        'chain_id' => null,
        'location_id' => null,
        'price' => 'float',
        'currency' => null,
        'conditions_of_use' => null,
        'properties' => null,
        'has_low_quantity' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'vendor_id' => 'vendor_id',
        'chain_id' => 'chain_id',
        'location_id' => 'location_id',
        'price' => 'price',
        'currency' => 'currency',
        'conditions_of_use' => 'conditions_of_use',
        'properties' => 'properties',
        'has_low_quantity' => 'has_low_quantity'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'vendor_id' => 'setVendorId',
        'chain_id' => 'setChainId',
        'location_id' => 'setLocationId',
        'price' => 'setPrice',
        'currency' => 'setCurrency',
        'conditions_of_use' => 'setConditionsOfUse',
        'properties' => 'setProperties',
        'has_low_quantity' => 'setHasLowQuantity'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'vendor_id' => 'getVendorId',
        'chain_id' => 'getChainId',
        'location_id' => 'getLocationId',
        'price' => 'getPrice',
        'currency' => 'getCurrency',
        'conditions_of_use' => 'getConditionsOfUse',
        'properties' => 'getProperties',
        'has_low_quantity' => 'getHasLowQuantity'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['vendor_id'] = isset($data['vendor_id']) ? $data['vendor_id'] : null;
        $this->container['chain_id'] = isset($data['chain_id']) ? $data['chain_id'] : null;
        $this->container['location_id'] = isset($data['location_id']) ? $data['location_id'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['conditions_of_use'] = isset($data['conditions_of_use']) ? $data['conditions_of_use'] : null;
        $this->container['properties'] = isset($data['properties']) ? $data['properties'] : null;
        $this->container['has_low_quantity'] = isset($data['has_low_quantity']) ? $data['has_low_quantity'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id The ID of the ticket type
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets vendor_id
     * @return string
     */
    public function getVendorId()
    {
        return $this->container['vendor_id'];
    }

    /**
     * Sets vendor_id
     * @param string $vendor_id The ID of the ticket type assigned by the cinema chain
     * @return $this
     */
    public function setVendorId($vendor_id)
    {
        $this->container['vendor_id'] = $vendor_id;

        return $this;
    }

    /**
     * Gets chain_id
     * @return string
     */
    public function getChainId()
    {
        return $this->container['chain_id'];
    }

    /**
     * Sets chain_id
     * @param string $chain_id The ID of the related cinema chain
     * @return $this
     */
    public function setChainId($chain_id)
    {
        $this->container['chain_id'] = $chain_id;

        return $this;
    }

    /**
     * Gets location_id
     * @return string
     */
    public function getLocationId()
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     * @param string $location_id The ID of the location in which the ticket would be valid
     * @return $this
     */
    public function setLocationId($location_id)
    {
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets price
     * @return float
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     * @param float $price The price of the individual ticket
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets currency
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     * @param string $currency The currency of the associated price
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets conditions_of_use
     * @return string
     */
    public function getConditionsOfUse()
    {
        return $this->container['conditions_of_use'];
    }

    /**
     * Sets conditions_of_use
     * @param string $conditions_of_use The conditions of use text
     * @return $this
     */
    public function setConditionsOfUse($conditions_of_use)
    {
        $this->container['conditions_of_use'] = $conditions_of_use;

        return $this;
    }

    /**
     * Gets properties
     * @return string[]
     */
    public function getProperties()
    {
        return $this->container['properties'];
    }

    /**
     * Sets properties
     * @param string[] $properties
     * @return $this
     */
    public function setProperties($properties)
    {
        $this->container['properties'] = $properties;

        return $this;
    }

    /**
     * Gets has_low_quantity
     * @return bool
     */
    public function getHasLowQuantity()
    {
        return $this->container['has_low_quantity'];
    }

    /**
     * Sets has_low_quantity
     * @param bool $has_low_quantity Indicates when this ticket type has low stock availablility
     * @return $this
     */
    public function setHasLowQuantity($has_low_quantity)
    {
        $this->container['has_low_quantity'] = $has_low_quantity;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\DCG\Cinema\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\DCG\Cinema\ObjectSerializer::sanitizeForSerialization($this));
    }
}


