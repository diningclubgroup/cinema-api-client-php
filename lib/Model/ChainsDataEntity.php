<?php
/**
 * ChainsDataEntity
 *
 * PHP version 5
 *
 * @category Class
 * @package  DCG\Cinema
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cinema API
 *
 * Dining club API for Cinema platform
 *
 * OpenAPI spec version: 0.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DCG\Cinema\Model;

use \ArrayAccess;

/**
 * ChainsDataEntity Class Doc Comment
 *
 * @category    Class
 * @package     DCG\Cinema
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ChainsDataEntity implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'chainsDataEntity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'name' => 'string',
        'maximum_number_of_tickets' => 'float',
        'introduction_instructions' => 'string',
        'how_to_redeem' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'name' => null,
        'maximum_number_of_tickets' => 'int32',
        'introduction_instructions' => null,
        'how_to_redeem' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'maximum_number_of_tickets' => 'maximum_number_of_tickets',
        'introduction_instructions' => 'introduction_instructions',
        'how_to_redeem' => 'how_to_redeem'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'maximum_number_of_tickets' => 'setMaximumNumberOfTickets',
        'introduction_instructions' => 'setIntroductionInstructions',
        'how_to_redeem' => 'setHowToRedeem'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'maximum_number_of_tickets' => 'getMaximumNumberOfTickets',
        'introduction_instructions' => 'getIntroductionInstructions',
        'how_to_redeem' => 'getHowToRedeem'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['maximum_number_of_tickets'] = isset($data['maximum_number_of_tickets']) ? $data['maximum_number_of_tickets'] : null;
        $this->container['introduction_instructions'] = isset($data['introduction_instructions']) ? $data['introduction_instructions'] : null;
        $this->container['how_to_redeem'] = isset($data['how_to_redeem']) ? $data['how_to_redeem'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id The ID of the chain
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name The name of the chain
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets maximum_number_of_tickets
     * @return float
     */
    public function getMaximumNumberOfTickets()
    {
        return $this->container['maximum_number_of_tickets'];
    }

    /**
     * Sets maximum_number_of_tickets
     * @param float $maximum_number_of_tickets The total number of tickets that can be purchased in one order
     * @return $this
     */
    public function setMaximumNumberOfTickets($maximum_number_of_tickets)
    {
        $this->container['maximum_number_of_tickets'] = $maximum_number_of_tickets;

        return $this;
    }

    /**
     * Gets introduction_instructions
     * @return string
     */
    public function getIntroductionInstructions()
    {
        return $this->container['introduction_instructions'];
    }

    /**
     * Sets introduction_instructions
     * @param string $introduction_instructions Information on how the user should proceed
     * @return $this
     */
    public function setIntroductionInstructions($introduction_instructions)
    {
        $this->container['introduction_instructions'] = $introduction_instructions;

        return $this;
    }

    /**
     * Gets how_to_redeem
     * @return string
     */
    public function getHowToRedeem()
    {
        return $this->container['how_to_redeem'];
    }

    /**
     * Sets how_to_redeem
     * @param string $how_to_redeem Information on how the user should redeem their codes
     * @return $this
     */
    public function setHowToRedeem($how_to_redeem)
    {
        $this->container['how_to_redeem'] = $how_to_redeem;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\DCG\Cinema\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\DCG\Cinema\ObjectSerializer::sanitizeForSerialization($this));
    }
}


